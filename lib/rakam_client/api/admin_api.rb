=begin
#Rakam API Documentation

#An analytics platform API that lets you create your own analytics services.

OpenAPI spec version: 0.5
Contact: contact@rakam.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module RakamClient
  class AdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add fields to collections by transforming other schemas
    # 
    # @param project_add_custom_fields_to_schema 
    # @param [Hash] opts the optional parameters
    # @return [Array<SchemaField>]
    def add_custom_fields_to_schema(project_add_custom_fields_to_schema, opts = {})
      data, _status_code, _headers = add_custom_fields_to_schema_with_http_info(project_add_custom_fields_to_schema, opts)
      return data
    end

    # Add fields to collections by transforming other schemas
    # 
    # @param project_add_custom_fields_to_schema 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SchemaField>, Fixnum, Hash)>] Array<SchemaField> data, response status code and response headers
    def add_custom_fields_to_schema_with_http_info(project_add_custom_fields_to_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.add_custom_fields_to_schema ..."
      end
      # verify the required parameter 'project_add_custom_fields_to_schema' is set
      fail ArgumentError, "Missing the required parameter 'project_add_custom_fields_to_schema' when calling AdminApi.add_custom_fields_to_schema" if project_add_custom_fields_to_schema.nil?
      # resource path
      local_var_path = "/project/schema/add/custom".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_add_custom_fields_to_schema)
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SchemaField>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_custom_fields_to_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add fields to collections
    # 
    # @param project_add_fields_to_schema 
    # @param [Hash] opts the optional parameters
    # @return [Array<SchemaField>]
    def add_fields_to_schema(project_add_fields_to_schema, opts = {})
      data, _status_code, _headers = add_fields_to_schema_with_http_info(project_add_fields_to_schema, opts)
      return data
    end

    # Add fields to collections
    # 
    # @param project_add_fields_to_schema 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SchemaField>, Fixnum, Hash)>] Array<SchemaField> data, response status code and response headers
    def add_fields_to_schema_with_http_info(project_add_fields_to_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.add_fields_to_schema ..."
      end
      # verify the required parameter 'project_add_fields_to_schema' is set
      fail ArgumentError, "Missing the required parameter 'project_add_fields_to_schema' when calling AdminApi.add_fields_to_schema" if project_add_fields_to_schema.nil?
      # resource path
      local_var_path = "/project/schema/add".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_add_fields_to_schema)
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SchemaField>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#add_fields_to_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create API Keys
    # 
    # @param project_check_api_keys 
    # @param [Hash] opts the optional parameters
    # @return [Array<BOOLEAN>]
    def check_api_keys(project_check_api_keys, opts = {})
      data, _status_code, _headers = check_api_keys_with_http_info(project_check_api_keys, opts)
      return data
    end

    # Create API Keys
    # 
    # @param project_check_api_keys 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BOOLEAN>, Fixnum, Hash)>] Array<BOOLEAN> data, response status code and response headers
    def check_api_keys_with_http_info(project_check_api_keys, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.check_api_keys ..."
      end
      # verify the required parameter 'project_check_api_keys' is set
      fail ArgumentError, "Missing the required parameter 'project_check_api_keys' when calling AdminApi.check_api_keys" if project_check_api_keys.nil?
      # resource path
      local_var_path = "/project/check-api-keys".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_check_api_keys)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BOOLEAN>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#check_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check lock key
    # 
    # @param check_lock_key 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def check_lock_key(check_lock_key, opts = {})
      data, _status_code, _headers = check_lock_key_with_http_info(check_lock_key, opts)
      return data
    end

    # Check lock key
    # 
    # @param check_lock_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def check_lock_key_with_http_info(check_lock_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.check_lock_key ..."
      end
      # verify the required parameter 'check_lock_key' is set
      fail ArgumentError, "Missing the required parameter 'check_lock_key' when calling AdminApi.check_lock_key" if check_lock_key.nil?
      # resource path
      local_var_path = "/admin/lock_key".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(check_lock_key)
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#check_lock_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get collection names
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def collections(opts = {})
      data, _status_code, _headers = collections_with_http_info(opts)
      return data
    end

    # Get collection names
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.collections ..."
      end
      # resource path
      local_var_path = "/project/collection".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create API Keys
    # 
    # @param [Hash] opts the optional parameters
    # @return [ProjectApiKeys]
    def create_api_keys(opts = {})
      data, _status_code, _headers = create_api_keys_with_http_info(opts)
      return data
    end

    # Create API Keys
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectApiKeys, Fixnum, Hash)>] ProjectApiKeys data, response status code and response headers
    def create_api_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.create_api_keys ..."
      end
      # resource path
      local_var_path = "/project/create-api-keys".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectApiKeys')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create project
    # 
    # @param create_project 
    # @param [Hash] opts the optional parameters
    # @return [ProjectApiKeys]
    def create_project(create_project, opts = {})
      data, _status_code, _headers = create_project_with_http_info(create_project, opts)
      return data
    end

    # Create project
    # 
    # @param create_project 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectApiKeys, Fixnum, Hash)>] ProjectApiKeys data, response status code and response headers
    def create_project_with_http_info(create_project, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.create_project ..."
      end
      # verify the required parameter 'create_project' is set
      fail ArgumentError, "Missing the required parameter 'create_project' when calling AdminApi.create_project" if create_project.nil?
      # resource path
      local_var_path = "/project/create".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_project)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectApiKeys')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#create_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete project
    # 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def delete_project(opts = {})
      data, _status_code, _headers = delete_project_with_http_info(opts)
      return data
    end

    # Delete project
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def delete_project_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.delete_project ..."
      end
      # resource path
      local_var_path = "/project/delete".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#delete_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List installed modules
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<ModuleDescriptor>]
    def get_configurations(opts = {})
      data, _status_code, _headers = get_configurations_with_http_info(opts)
      return data
    end

    # List installed modules
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ModuleDescriptor>, Fixnum, Hash)>] Array<ModuleDescriptor> data, response status code and response headers
    def get_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.get_configurations ..."
      end
      # resource path
      local_var_path = "/admin/configurations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ModuleDescriptor>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List created projects
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_projects(opts = {})
      data, _status_code, _headers = get_projects_with_http_info(opts)
      return data
    end

    # List created projects
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_projects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.get_projects ..."
      end
      # resource path
      local_var_path = "/project/list".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get project stats
    # 
    # @param project_get_stats 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Stats>]
    def get_stats(project_get_stats, opts = {})
      data, _status_code, _headers = get_stats_with_http_info(project_get_stats, opts)
      return data
    end

    # Get project stats
    # 
    # @param project_get_stats 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Stats>, Fixnum, Hash)>] Hash<String, Stats> data, response status code and response headers
    def get_stats_with_http_info(project_get_stats, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.get_stats ..."
      end
      # verify the required parameter 'project_get_stats' is set
      fail ArgumentError, "Missing the required parameter 'project_get_stats' when calling AdminApi.get_stats" if project_get_stats.nil?
      # resource path
      local_var_path = "/project/stats".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_get_stats)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Stats>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get types
    # 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def get_types(opts = {})
      data, _status_code, _headers = get_types_with_http_info(opts)
      return data
    end

    # Get types
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Fixnum, Hash)>] Hash<String, String> data, response status code and response headers
    def get_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.get_types ..."
      end
      # resource path
      local_var_path = "/admin/types".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#get_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke API Keys
    # 
    # @param master_key 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def revoke_api_keys(master_key, opts = {})
      data, _status_code, _headers = revoke_api_keys_with_http_info(master_key, opts)
      return data
    end

    # Revoke API Keys
    # 
    # @param master_key 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def revoke_api_keys_with_http_info(master_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.revoke_api_keys ..."
      end
      # verify the required parameter 'master_key' is set
      fail ArgumentError, "Missing the required parameter 'master_key' when calling AdminApi.revoke_api_keys" if master_key.nil?
      # resource path
      local_var_path = "/project/revoke-api-keys".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'master_key'] = master_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#revoke_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get collection schema
    # 
    # @param project_schema 
    # @param [Hash] opts the optional parameters
    # @return [Array<Collection>]
    def schema(project_schema, opts = {})
      data, _status_code, _headers = schema_with_http_info(project_schema, opts)
      return data
    end

    # Get collection schema
    # 
    # @param project_schema 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Collection>, Fixnum, Hash)>] Array<Collection> data, response status code and response headers
    def schema_with_http_info(project_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AdminApi.schema ..."
      end
      # verify the required parameter 'project_schema' is set
      fail ArgumentError, "Missing the required parameter 'project_schema' when calling AdminApi.schema" if project_schema.nil?
      # resource path
      local_var_path = "/project/schema".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(project_schema)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Collection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
