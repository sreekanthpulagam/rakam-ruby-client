=begin
#Rakam API Documentation

#An analytics platform API that lets you create your own analytics services.

OpenAPI spec version: 0.5
Contact: contact@rakam.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module RakamClient
  class CollectApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Collect multiple events
    # Returns 1 if the events are collected.
    # @param event_list 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def batch_events(event_list, opts = {})
      data, _status_code, _headers = batch_events_with_http_info(event_list, opts)
      return data
    end

    # Collect multiple events
    # Returns 1 if the events are collected.
    # @param event_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def batch_events_with_http_info(event_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectApi.batch_events ..."
      end
      # verify the required parameter 'event_list' is set
      fail ArgumentError, "Missing the required parameter 'event_list' when calling CollectApi.batch_events" if event_list.nil?
      # resource path
      local_var_path = "/event/batch".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(event_list)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectApi#batch_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collect Bulk events
    # Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set 'collection' and 'master_key' query parameters if the content-type is not application/json.
    # @param event_list 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def bulk_events(event_list, opts = {})
      data, _status_code, _headers = bulk_events_with_http_info(event_list, opts)
      return data
    end

    # Collect Bulk events
    # Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
    # @param event_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def bulk_events_with_http_info(event_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectApi.bulk_events ..."
      end
      # verify the required parameter 'event_list' is set
      fail ArgumentError, "Missing the required parameter 'event_list' when calling CollectApi.bulk_events" if event_list.nil?
      # resource path
      local_var_path = "/event/bulk".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(event_list)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectApi#bulk_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collect bulk events from remote
    # 
    # @param bulk_event_remote 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def bulk_events_remote(bulk_event_remote, opts = {})
      data, _status_code, _headers = bulk_events_remote_with_http_info(bulk_event_remote, opts)
      return data
    end

    # Collect bulk events from remote
    # 
    # @param bulk_event_remote 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def bulk_events_remote_with_http_info(bulk_event_remote, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectApi.bulk_events_remote ..."
      end
      # verify the required parameter 'bulk_event_remote' is set
      fail ArgumentError, "Missing the required parameter 'bulk_event_remote' when calling CollectApi.bulk_events_remote" if bulk_event_remote.nil?
      # resource path
      local_var_path = "/event/bulk/remote".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bulk_event_remote)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectApi#bulk_events_remote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collect event
    # 
    # @param event 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def collect_event(event, opts = {})
      data, _status_code, _headers = collect_event_with_http_info(event, opts)
      return data
    end

    # Collect event
    # 
    # @param event 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def collect_event_with_http_info(event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectApi.collect_event ..."
      end
      # verify the required parameter 'event' is set
      fail ArgumentError, "Missing the required parameter 'event' when calling CollectApi.collect_event" if event.nil?
      # resource path
      local_var_path = "/event/collect".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(event)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectApi#collect_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commit Bulk events
    # 
    # @param commit_bulk_events 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def commit_bulk_events(commit_bulk_events, opts = {})
      data, _status_code, _headers = commit_bulk_events_with_http_info(commit_bulk_events, opts)
      return data
    end

    # Commit Bulk events
    # 
    # @param commit_bulk_events 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def commit_bulk_events_with_http_info(commit_bulk_events, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CollectApi.commit_bulk_events ..."
      end
      # verify the required parameter 'commit_bulk_events' is set
      fail ArgumentError, "Missing the required parameter 'commit_bulk_events' when calling CollectApi.commit_bulk_events" if commit_bulk_events.nil?
      # resource path
      local_var_path = "/event/bulk/commit".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(commit_bulk_events)
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectApi#commit_bulk_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
