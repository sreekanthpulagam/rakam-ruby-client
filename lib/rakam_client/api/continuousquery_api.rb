=begin
#Rakam API Documentation

#An analytics platform API that lets you create your own analytics services.

OpenAPI spec version: 0.5
Contact: contact@rakam.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module RakamClient
  class ContinuousqueryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create stream
    # Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
    # @param continuous_query 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def create_query(continuous_query, opts = {})
      data, _status_code, _headers = create_query_with_http_info(continuous_query, opts)
      return data
    end

    # Create stream
    # Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
    # @param continuous_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def create_query_with_http_info(continuous_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContinuousqueryApi.create_query ..."
      end
      # verify the required parameter 'continuous_query' is set
      fail ArgumentError, "Missing the required parameter 'continuous_query' when calling ContinuousqueryApi.create_query" if continuous_query.nil?
      # resource path
      local_var_path = "/continuous-query/create".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(continuous_query)
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContinuousqueryApi#create_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete stream
    # 
    # @param continuous_query_delete_query 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def delete_query(continuous_query_delete_query, opts = {})
      data, _status_code, _headers = delete_query_with_http_info(continuous_query_delete_query, opts)
      return data
    end

    # Delete stream
    # 
    # @param continuous_query_delete_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def delete_query_with_http_info(continuous_query_delete_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContinuousqueryApi.delete_query ..."
      end
      # verify the required parameter 'continuous_query_delete_query' is set
      fail ArgumentError, "Missing the required parameter 'continuous_query_delete_query' when calling ContinuousqueryApi.delete_query" if continuous_query_delete_query.nil?
      # resource path
      local_var_path = "/continuous-query/delete".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(continuous_query_delete_query)
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContinuousqueryApi#delete_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get continuous query
    # 
    # @param continuous_query_get_query 
    # @param [Hash] opts the optional parameters
    # @return [ContinuousQuery]
    def get_query(continuous_query_get_query, opts = {})
      data, _status_code, _headers = get_query_with_http_info(continuous_query_get_query, opts)
      return data
    end

    # Get continuous query
    # 
    # @param continuous_query_get_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContinuousQuery, Fixnum, Hash)>] ContinuousQuery data, response status code and response headers
    def get_query_with_http_info(continuous_query_get_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContinuousqueryApi.get_query ..."
      end
      # verify the required parameter 'continuous_query_get_query' is set
      fail ArgumentError, "Missing the required parameter 'continuous_query_get_query' when calling ContinuousqueryApi.get_query" if continuous_query_get_query.nil?
      # resource path
      local_var_path = "/continuous-query/get".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(continuous_query_get_query)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContinuousQuery')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContinuousqueryApi#get_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get query schema
    # 
    # @param continuous_query_get_schema_of_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<Collection>]
    def get_schema_of_query(continuous_query_get_schema_of_query, opts = {})
      data, _status_code, _headers = get_schema_of_query_with_http_info(continuous_query_get_schema_of_query, opts)
      return data
    end

    # Get query schema
    # 
    # @param continuous_query_get_schema_of_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Collection>, Fixnum, Hash)>] Array<Collection> data, response status code and response headers
    def get_schema_of_query_with_http_info(continuous_query_get_schema_of_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContinuousqueryApi.get_schema_of_query ..."
      end
      # verify the required parameter 'continuous_query_get_schema_of_query' is set
      fail ArgumentError, "Missing the required parameter 'continuous_query_get_schema_of_query' when calling ContinuousqueryApi.get_schema_of_query" if continuous_query_get_schema_of_query.nil?
      # resource path
      local_var_path = "/continuous-query/schema".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(continuous_query_get_schema_of_query)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Collection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContinuousqueryApi#get_schema_of_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List queries
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<ContinuousQuery>]
    def list_queries(opts = {})
      data, _status_code, _headers = list_queries_with_http_info(opts)
      return data
    end

    # List queries
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ContinuousQuery>, Fixnum, Hash)>] Array<ContinuousQuery> data, response status code and response headers
    def list_queries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContinuousqueryApi.list_queries ..."
      end
      # resource path
      local_var_path = "/continuous-query/list".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ContinuousQuery>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContinuousqueryApi#list_queries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Test continuous query
    # 
    # @param continuous_query_test_query 
    # @param [Hash] opts the optional parameters
    # @return [BOOLEAN]
    def test_query(continuous_query_test_query, opts = {})
      data, _status_code, _headers = test_query_with_http_info(continuous_query_test_query, opts)
      return data
    end

    # Test continuous query
    # 
    # @param continuous_query_test_query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def test_query_with_http_info(continuous_query_test_query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContinuousqueryApi.test_query ..."
      end
      # verify the required parameter 'continuous_query_test_query' is set
      fail ArgumentError, "Missing the required parameter 'continuous_query_test_query' when calling ContinuousqueryApi.test_query" if continuous_query_test_query.nil?
      # resource path
      local_var_path = "/continuous-query/test".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(continuous_query_test_query)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContinuousqueryApi#test_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
