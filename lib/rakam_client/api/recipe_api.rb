=begin
#Rakam API Documentation

#An analytics platform API that lets you create your own analytics services.

OpenAPI spec version: 0.5
Contact: contact@rakam.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module RakamClient
  class RecipeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Export recipe
    # 
    # @param accept 
    # @param [Hash] opts the optional parameters
    # @return [Recipe]
    def export_recipe(accept, opts = {})
      data, _status_code, _headers = export_recipe_with_http_info(accept, opts)
      return data
    end

    # Export recipe
    # 
    # @param accept 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Recipe, Fixnum, Hash)>] Recipe data, response status code and response headers
    def export_recipe_with_http_info(accept, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipeApi.export_recipe ..."
      end
      # verify the required parameter 'accept' is set
      fail ArgumentError, "Missing the required parameter 'accept' when calling RecipeApi.export_recipe" if accept.nil?
      # verify enum value
      unless ['JSON', 'YAML'].include?(accept)
        fail ArgumentError, "invalid value for 'accept', must be one of JSON, YAML"
      end
      # resource path
      local_var_path = "/recipe/export".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Recipe')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipeApi#export_recipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Install recipe
    # 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def install_recipe(opts = {})
      data, _status_code, _headers = install_recipe_with_http_info(opts)
      return data
    end

    # Install recipe
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def install_recipe_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RecipeApi.install_recipe ..."
      end
      # resource path
      local_var_path = "/recipe/install".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipeApi#install_recipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
