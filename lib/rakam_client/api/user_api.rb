=begin
#Rakam API Documentation

#An analytics platform API that lets you create your own analytics services.

OpenAPI spec version: 0.5
Contact: contact@rakam.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module RakamClient
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get events of the user
    # 
    # @param user_create_segment 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def create_segment(user_create_segment, opts = {})
      data, _status_code, _headers = create_segment_with_http_info(user_create_segment, opts)
      return data
    end

    # Get events of the user
    # 
    # @param user_create_segment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def create_segment_with_http_info(user_create_segment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.create_segment ..."
      end
      # verify the required parameter 'user_create_segment' is set
      fail ArgumentError, "Missing the required parameter 'user_create_segment' when calling UserApi.create_segment" if user_create_segment.nil?
      # resource path
      local_var_path = "/user/create_segment".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_create_segment)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#create_segment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new user
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def create_user(user, opts = {})
      data, _status_code, _headers = create_user_with_http_info(user, opts)
      return data
    end

    # Create new user
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def create_user_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.create_user ..."
      end
      # verify the required parameter 'user' is set
      fail ArgumentError, "Missing the required parameter 'user' when calling UserApi.create_user" if user.nil?
      # resource path
      local_var_path = "/user/create".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create multiple new users
    # Returns user ids. User id may be string or numeric.
    # @param user_create_users 
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def create_users(user_create_users, opts = {})
      data, _status_code, _headers = create_users_with_http_info(user_create_users, opts)
      return data
    end

    # Create multiple new users
    # Returns user ids. User id may be string or numeric.
    # @param user_create_users 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def create_users_with_http_info(user_create_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.create_users ..."
      end
      # verify the required parameter 'user_create_users' is set
      fail ArgumentError, "Missing the required parameter 'user_create_users' when calling UserApi.create_users" if user_create_users.nil?
      # resource path
      local_var_path = "/user/batch/create".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_create_users)
      auth_names = ['write_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#create_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get events of the user
    # 
    # @param user_get_events 
    # @param [Hash] opts the optional parameters
    # @return [Array<CollectionEvent>]
    def get_events(user_get_events, opts = {})
      data, _status_code, _headers = get_events_with_http_info(user_get_events, opts)
      return data
    end

    # Get events of the user
    # 
    # @param user_get_events 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CollectionEvent>, Fixnum, Hash)>] Array<CollectionEvent> data, response status code and response headers
    def get_events_with_http_info(user_get_events, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.get_events ..."
      end
      # verify the required parameter 'user_get_events' is set
      fail ArgumentError, "Missing the required parameter 'user_get_events' when calling UserApi.get_events" if user_get_events.nil?
      # resource path
      local_var_path = "/user/get_events".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_get_events)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CollectionEvent>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user storage metadata
    # 
    # @param [Hash] opts the optional parameters
    # @return [MetadataResponse]
    def get_metadata(opts = {})
      data, _status_code, _headers = get_metadata_with_http_info(opts)
      return data
    end

    # Get user storage metadata
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MetadataResponse, Fixnum, Hash)>] MetadataResponse data, response status code and response headers
    def get_metadata_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.get_metadata ..."
      end
      # resource path
      local_var_path = "/user/metadata".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MetadataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user
    # 
    # @param user_get_user 
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(user_get_user, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_get_user, opts)
      return data
    end

    # Get user
    # 
    # @param user_get_user 
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(user_get_user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.get_user ..."
      end
      # verify the required parameter 'user_get_user' is set
      fail ArgumentError, "Missing the required parameter 'user_get_user' when calling UserApi.get_user" if user_get_user.nil?
      # resource path
      local_var_path = "/user/get".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_get_user)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set user property
    # 
    # @param user_increment_property 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def increment_property(user_increment_property, opts = {})
      data, _status_code, _headers = increment_property_with_http_info(user_increment_property, opts)
      return data
    end

    # Set user property
    # 
    # @param user_increment_property 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def increment_property_with_http_info(user_increment_property, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.increment_property ..."
      end
      # verify the required parameter 'user_increment_property' is set
      fail ArgumentError, "Missing the required parameter 'user_increment_property' when calling UserApi.increment_property" if user_increment_property.nil?
      # resource path
      local_var_path = "/user/increment_property".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_increment_property)
      auth_names = ['master_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#increment_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search users
    # 
    # @param user_search_users 
    # @param [Hash] opts the optional parameters
    # @return [QueryResult]
    def search_users(user_search_users, opts = {})
      data, _status_code, _headers = search_users_with_http_info(user_search_users, opts)
      return data
    end

    # Search users
    # 
    # @param user_search_users 
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueryResult, Fixnum, Hash)>] QueryResult data, response status code and response headers
    def search_users_with_http_info(user_search_users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.search_users ..."
      end
      # verify the required parameter 'user_search_users' is set
      fail ArgumentError, "Missing the required parameter 'user_search_users' when calling UserApi.search_users" if user_search_users.nil?
      # resource path
      local_var_path = "/user/search".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_search_users)
      auth_names = ['read_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueryResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#search_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set user properties
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def set_properties(user, opts = {})
      data, _status_code, _headers = set_properties_with_http_info(user, opts)
      return data
    end

    # Set user properties
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def set_properties_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.set_properties ..."
      end
      # verify the required parameter 'user' is set
      fail ArgumentError, "Missing the required parameter 'user' when calling UserApi.set_properties" if user.nil?
      # resource path
      local_var_path = "/user/set_properties".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#set_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set user properties once
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def set_properties_once(user, opts = {})
      data, _status_code, _headers = set_properties_once_with_http_info(user, opts)
      return data
    end

    # Set user properties once
    # 
    # @param user 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Fixnum, Hash)>] Integer data, response status code and response headers
    def set_properties_once_with_http_info(user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.set_properties_once ..."
      end
      # verify the required parameter 'user' is set
      fail ArgumentError, "Missing the required parameter 'user' when calling UserApi.set_properties_once" if user.nil?
      # resource path
      local_var_path = "/user/set_properties_once".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Integer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#set_properties_once\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unset user property
    # 
    # @param user_unset_property 
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def unset_property(user_unset_property, opts = {})
      data, _status_code, _headers = unset_property_with_http_info(user_unset_property, opts)
      return data
    end

    # Unset user property
    # 
    # @param user_unset_property 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Fixnum, Hash)>] SuccessMessage data, response status code and response headers
    def unset_property_with_http_info(user_unset_property, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: UserApi.unset_property ..."
      end
      # verify the required parameter 'user_unset_property' is set
      fail ArgumentError, "Missing the required parameter 'user_unset_property' when calling UserApi.unset_property" if user_unset_property.nil?
      # resource path
      local_var_path = "/user/unset_properties".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_unset_property)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#unset_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
