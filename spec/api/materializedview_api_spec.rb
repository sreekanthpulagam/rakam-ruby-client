=begin
#Rakam API Documentation

#An analytics platform API that lets you create your own analytics services.

OpenAPI spec version: 0.5
Contact: contact@rakam.io
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for RakamClient::MaterializedviewApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MaterializedviewApi' do
  before do
    # run before each test
    @instance = RakamClient::MaterializedviewApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MaterializedviewApi' do
    it 'should create an instact of MaterializedviewApi' do
      expect(@instance).to be_instance_of(RakamClient::MaterializedviewApi)
    end
  end

  # unit tests for create_view
  # Create view
  # 
  # @param materialized_view 
  # @param [Hash] opts the optional parameters
  # @return [SuccessMessage]
  describe 'create_view test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_view
  # Delete materialized view
  # 
  # @param materialized_view_delete_view 
  # @param [Hash] opts the optional parameters
  # @return [SuccessMessage]
  describe 'delete_view test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_schema_of_view
  # Get schemas
  # 
  # @param materialized_view_get_schema_of_view 
  # @param [Hash] opts the optional parameters
  # @return [Array<MaterializedViewSchema>]
  describe 'get_schema_of_view test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_view
  # Get view
  # 
  # @param materialized_view_get_view 
  # @param [Hash] opts the optional parameters
  # @return [MaterializedView]
  describe 'get_view test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_views
  # List views
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<MaterializedView>]
  describe 'list_views test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
